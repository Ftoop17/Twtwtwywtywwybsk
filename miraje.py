from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Updater, CommandHandler, CallbackQueryHandler, MessageHandler, Filters, JobQueue
import sqlite3
import logging
import re
from datetime import time

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO)
logger = logging.getLogger(__name__)

# –¢–æ–∫–µ–Ω –≤–∞—à–µ–≥–æ –±–æ—Ç–∞
TOKEN = '7571263514:AAGBikYT7U6AtbRoSgU4ufGDoed2pvod_70'

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö SQLite
conn = sqlite3.connect('miraje_bot.db', check_same_thread=False)
cursor = conn.cursor()

# –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
cursor.execute('''
CREATE TABLE IF NOT EXISTS phrases (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    phrase TEXT NOT NULL,
    response TEXT NOT NULL
)
''')

cursor.execute('''
CREATE TABLE IF NOT EXISTS admin (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    user_id INTEGER NOT NULL UNIQUE
)
''')

cursor.execute('''
CREATE TABLE IF NOT EXISTS unanswered_questions (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    question TEXT NOT NULL
)
''')

conn.commit()

# ID –∞–¥–º–∏–Ω–∞ (–∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à)
ADMIN_ID = 7114988418

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
def add_user(user_id, username, first_name):
    cursor.execute('''
    INSERT OR IGNORE INTO users (user_id, username, first_name)
    VALUES (?, ?, ?)
    ''', (user_id, username, first_name))
    conn.commit()
    
# –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
def start(update: Update, context) -> None:
    welcome_text = (
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø MIRAJE AIüíô–æ–¥–∏–Ω –∏–∑ –ª—É—á—à–∏—Ö –Ω–µ–π—Ä–æ—Å–µ—Ç–µ–π,–µ—Å–ª–∏ –≤–¥—Ä—É–≥ –≤—ã –Ω–µ –Ω–∞—à–ª–∏ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å —Ç–æ –Ω–µ –≤–æ–ª–Ω—É–π—Ç–µ—Å—å –≤—Å–∫–æ—Ä–µ –Ω–∞—à–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –¥–æ–±–∞–≤—è—Ç –æ—Ç–≤–µ—Ç –Ω–∞ –≤–∞—à –≤–æ–ø—Ä–æ—Åüíô\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω—É –∏–∑ —Ñ—É–Ω–∫—Ü–∏–π –Ω–∏–∂–µ:"
    )
    keyboard = [
        [InlineKeyboardButton("ü§ñ AI", callback_data='ai')],
        [InlineKeyboardButton("üßÆ –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä", callback_data='calculator')],
        [InlineKeyboardButton("üìä –î–ª—è –±—É—Ö–≥–∞–ª—Ç–µ—Ä–æ–≤", callback_data='accountant')],
        [InlineKeyboardButton("üë§ –ê–≤—Ç–æ—Ä", callback_data='author')],
        [InlineKeyboardButton("üõë –°—Ç–æ–ø", callback_data='stop')]
    ]
    if update.message.from_user.id == ADMIN_ID:
        keyboard.append([InlineKeyboardButton("üîß –ê–¥–º–∏–Ω", callback_data='admin')])
        keyboard.append([InlineKeyboardButton("‚ùì –í–æ–ø—Ä–æ—Å—ã", callback_data='unanswered_questions')])
    reply_markup = InlineKeyboardMarkup(keyboard)
    update.message.reply_text(welcome_text, reply_markup=reply_markup)

# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω—É)
def list_users(update: Update, context) -> None:
    if update.message.from_user.id != ADMIN_ID:
        update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
        return

    cursor.execute('SELECT username, first_name FROM users')
    users = cursor.fetchall()
    if users:
        user_list = "\n".join([f"üë§ {user[1]} (@{user[0]})" if user[0] else f"üë§ {user[1]}" for user in users])
        update.message.reply_text(f"üìä –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n{user_list}")
    else:
        update.message.reply_text("üìä –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ–∫–∞ –Ω–µ—Ç.")
        
# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫
def button(update: Update, context) -> None:
    query = update.callback_query
    query.answer()

    if query.data == 'ai':
        keyboard = [
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='back')]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query.edit_message_text(text="ü§ñ –í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å:", reply_markup=reply_markup)
        context.user_data['mode'] = 'ai'
    elif query.data == 'calculator':
        keyboard = [
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='back')]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query.edit_message_text(
            text=(
                "üßÆ –í–≤–µ–¥–∏—Ç–µ –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø—Ä–∏–º–µ—Ä:\n"
                "–ü—Ä–∏–º–µ—Ä—ã:\n"
                "2 + 2\n"
                "10 * 5\n"
                "20 / 4\n"
                "15% –æ—Ç 200"
            ),
            reply_markup=reply_markup
        )
        context.user_data['mode'] = 'calculator'
    elif query.data == 'accountant':
        context.user_data['step'] = 'salary'
        context.user_data['data'] = {}
        keyboard = [
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='back')]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query.edit_message_text(text="üìä –í–≤–µ–¥–∏—Ç–µ –æ–∫–ª–∞–¥ —Ä–∞–±–æ—Ç–Ω–∏–∫–∞:", reply_markup=reply_markup)
    elif query.data == 'author':
        keyboard = [
            [InlineKeyboardButton("üìò –í–ö", url='https://vk.com/thetemirbolatov')],
            [InlineKeyboardButton("üì∏ –ò–Ω—Å—Ç–∞–≥—Ä–∞–º", url='https://instagram.com/thetemirbolatov')],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='back')]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query.edit_message_text(text="üë§ –ê–≤—Ç–æ—Ä: @thetemirbolatov", reply_markup=reply_markup)
    elif query.data == 'stop':
        query.edit_message_text(text="üõë –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –ù–∞–∂–º–∏—Ç–µ /start —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å.")
    elif query.data == 'admin':
        keyboard = [
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='back')]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query.edit_message_text(text="üîß –í—ã –≤–æ—à–ª–∏ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å. –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Ñ—Ä–∞–∑—É –∏ –æ—Ç–≤–µ—Ç —á–µ—Ä–µ–∑ '|'.", reply_markup=reply_markup)
    elif query.data == 'unanswered_questions':
        cursor.execute('SELECT * FROM unanswered_questions')
        questions = cursor.fetchall()
        if questions:
            for question in questions:
                keyboard = [
                    [InlineKeyboardButton("‚ùå –£–¥–∞–ª–∏—Ç—å", callback_data=f'delete_question_{question[0]}')]
                ]
                reply_markup = InlineKeyboardMarkup(keyboard)
                query.message.reply_text(f"‚ùì –í–æ–ø—Ä–æ—Å: {question[1]}", reply_markup=reply_markup)
        else:
            query.message.reply_text("‚ùì –ù–µ—Ç –Ω–µ–æ—Ç–≤–µ—á–µ–Ω–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤.")
    elif query.data.startswith('delete_question_'):
        question_id = int(query.data.split('_')[-1])
        cursor.execute('DELETE FROM unanswered_questions WHERE id = ?', (question_id,))
        conn.commit()
        query.message.reply_text("‚úÖ –í–æ–ø—Ä–æ—Å —É–¥–∞–ª–µ–Ω.")
    elif query.data == 'back':
        # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –±–æ—Ç–∞
        if 'message_ids' in context.user_data:
            for message_id in context.user_data['message_ids']:
                try:
                    context.bot.delete_message(chat_id=query.message.chat_id, message_id=message_id)
                except Exception as e:
                    logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ {message_id}: {e}")
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        context.user_data.clear()
        start(update=Update(0, message=query.message), context=context)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
def handle_message(update: Update, context) -> None:
    user_id = update.message.from_user.id
    text = update.message.text

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è
    if 'message_ids' not in context.user_data:
        context.user_data['message_ids'] = []
    context.user_data['message_ids'].append(update.message.message_id)

    # –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ —Ä–µ–∫–ª–∞–º—ã
    if re.search(r'http[s]?://(?:[a-zA-Z]|[0-9]|[$-_@.&+]|[!*\\(\\),]|(?:%[0-9a-fA-F][0-9a-fA-F]))+', text):
        update.message.reply_text("‚ùå –†–µ–∫–ª–∞–º–∞ –∑–∞–ø—Ä–µ—â–µ–Ω–∞!")
        return

    if user_id == ADMIN_ID and '|' in text:  # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ñ—Ä–∞–∑—ã –∏ –æ—Ç–≤–µ—Ç–∞
        phrase, response = text.split('|', 1)
        cursor.execute('INSERT INTO phrases (phrase, response) VALUES (?, ?)', (phrase.strip(), response.strip()))
        conn.commit()
        update.message.reply_text("‚úÖ –§—Ä–∞–∑–∞ –∏ –æ—Ç–≤–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö.")
    elif 'mode' in context.user_data:
        if context.user_data['mode'] == 'ai':  # –†–µ–∂–∏–º AI
            cursor.execute('SELECT response FROM phrases WHERE phrase = ?', (text,))
            result = cursor.fetchone()
            if result:
                update.message.reply_text(result[0])
            else:
                cursor.execute('INSERT INTO unanswered_questions (question) VALUES (?)', (text,))
                conn.commit()
                update.message.reply_text("ü§î –Ø –Ω–µ –∑–Ω–∞—é, —á—Ç–æ –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ —ç—Ç–æ.")
        elif context.user_data['mode'] == 'calculator':  # –†–µ–∂–∏–º –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞
            try:
                if '% –æ—Ç' in text:
                    value, percent = text.split('% –æ—Ç')
                    result = float(value.strip()) / 100 * float(percent.strip())
                else:
                    result = eval(text)
                update.message.reply_text(f"üßÆ –†–µ–∑—É–ª—å—Ç–∞—Ç: {result}")
            except Exception as e:
                update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {e}")
    elif 'step' in context.user_data:  # –†–µ–∂–∏–º –¥–ª—è –±—É—Ö–≥–∞–ª—Ç–µ—Ä–æ–≤
        handle_accountant(update, context)

# –õ–æ–≥–∏–∫–∞ –¥–ª—è –±—É—Ö–≥–∞–ª—Ç–µ—Ä–æ–≤
def handle_accountant(update: Update, context) -> None:
    step = context.user_data['step']
    data = context.user_data['data']
    text = update.message.text

    if step == 'salary':
        try:
            data['salary'] = float(text)
            context.user_data['step'] = 'children'
            update.message.reply_text("üë∂ –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–µ—Ç–µ–π –±–µ–∑ –∏–Ω–≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏: (–µ—Å–ª–∏ –Ω–µ—Ç—É –ø–∏—à–∏ 0)")
        except ValueError:
            update.message.reply_text("‚ùå –û—à–∏–±–∫–∞: –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.")
    elif step == 'children':
        try:
            data['children'] = int(text)
            context.user_data['step'] = 'disabled_children'
            update.message.reply_text("‚ôø –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–µ—Ç–µ–π-–∏–Ω–≤–∞–ª–∏–¥–æ–≤: (–µ—Å–ª–∏ –Ω–µ—Ç—É –ø–∏—à–∏ 0")
        except ValueError:
            update.message.reply_text("‚ùå –û—à–∏–±–∫–∞: –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.")
    elif step == 'disabled_children':
        try:
            data['disabled_children'] = int(text)
            calculate_salary(update, context)
        except ValueError:
            update.message.reply_text("‚ùå –û—à–∏–±–∫–∞: –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.")

# –†–∞—Å—á–µ—Ç –∑–∞—Ä–ø–ª–∞—Ç—ã
def calculate_salary(update: Update, context) -> None:
    data = context.user_data['data']
    salary = data['salary']
    children = data.get('children', 0)
    disabled_children = data.get('disabled_children', 0)

    # –†–∞—Å—á–µ—Ç –≤—ã—á–µ—Ç–æ–≤
    deductions = 0
    if children == 1:
        deductions += 1400
    elif children == 2:
        deductions += 2800
    elif children >= 3:
        deductions += 2800 + (children - 2) * 6000

    deductions += disabled_children * 12000

    # –†–∞—Å—á–µ—Ç –ù–î–§–õ
    taxable_base = max(0, salary - deductions)
    ndfl = taxable_base * 0.13

    # –ò—Ç–æ–≥–æ–≤–∞—è —Å—É–º–º–∞
    total = salary - ndfl

    # –í—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    result = (
        f"üíµ –û–∫–ª–∞–¥: {salary}\n"
        f"üßæ –í—ã—á–µ—Ç—ã: {deductions}\n"
        f"üìä –ù–∞–ª–æ–≥–æ–æ–±–ª–∞–≥–∞–µ–º–∞—è –±–∞–∑–∞: {taxable_base}\n"
        f"üßÆ –ù–î–§–õ: {ndfl}\n"
        f"üí∏ –ò—Ç–æ–≥–æ –∫ –≤—ã–ø–ª–∞—Ç–µ: {total}"
    )
    update.message.reply_text(result)
    context.user_data.clear()

# –†–∞—Å—Å—ã–ª–∫–∞ —Ä–µ–∫–ª–∞–º—ã
def send_advertisement(context):
    advertisement_text = (
        "üåü –ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Ç–µ—Å—å –∫ –Ω–∞—à–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ –≤ Instagram! üåü\n"
        "–•–æ—Ç–∏—Ç–µ –±—ã—Ç—å –≤ –∫—É—Ä—Å–µ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –Ω–æ–≤–∏–Ω–æ–∫, –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã—Ö –∞–∫—Ü–∏–π –∏ –≤–¥–æ—Ö–Ω–æ–≤–ª—è—é—â–µ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞? üí° –ü–æ–¥–ø–∏—Å—ã–≤–∞–π—Ç–µ—Å—å –Ω–∞ –Ω–∞—à—É —Å—Ç—Ä–∞–Ω–∏—Ü—É @thetemirbolatov !\n"
        "‚ú® –ó–¥–µ—Å—å –≤—ã –Ω–∞–π–¥–µ—Ç–µ:\n"
        "- –£–Ω–∏–∫–∞–ª—å–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –∏ —Å–∫–∏–¥–∫–∏ üéâ\n"
        "- –ü–æ–ª–µ–∑–Ω—ã–µ —Å–æ–≤–µ—Ç—ã –∏ –ª–∞–π—Ñ—Ö–∞–∫–∏ üí°\n"
        "- –Ø—Ä–∫–∏–µ —Ñ–æ—Ç–æ –∏ –≤–∏–¥–µ–æ –Ω–∞—à–µ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞ –≤ –¥–µ–π—Å—Ç–≤–∏–∏ üì∏\n"
        "- –£—á–∞—Å—Ç–∏–µ –≤ –∫–æ–Ω–∫—É—Ä—Å–∞—Ö –∏ —Ä–æ–∑—ã–≥—Ä—ã—à–∞—Ö üéÅ\n"
        "! ‚ù§Ô∏è –ù–∞–∂–º–∏—Ç–µ '–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è' –∏ –±—É–¥—å—Ç–µ —Å –Ω–∞–º–∏ –Ω–∞ —Å–≤—è–∑–∏!"
    )
    context.bot.send_message(chat_id=ADMIN_ID, text=advertisement_text)

def main() -> None:
    updater = Updater(TOKEN)
    dispatcher = updater.dispatcher

    dispatcher.add_handler(CommandHandler("start", start))
    dispatcher.add_handler(CommandHandler("users", list_users))
    dispatcher.add_handler(CallbackQueryHandler(button))
    dispatcher.add_handler(MessageHandler(Filters.text & ~Filters.command, handle_message))

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–∞—Å—Å—ã–ª–∫–∏ —Ä–µ–∫–ª–∞–º—ã
    job_queue = updater.job_queue
    job_queue.run_daily(send_advertisement, time(hour=10, minute=0))
    job_queue.run_daily(send_advertisement, time(hour=17, minute=0))

    updater.start_polling()
    updater.idle()

if __name__ == '__main__':
    main()